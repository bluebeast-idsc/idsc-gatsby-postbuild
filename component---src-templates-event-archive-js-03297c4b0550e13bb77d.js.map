{"version":3,"sources":["webpack://idsc-gatsby-wordpress/./src/components/atoms/button.js","webpack://idsc-gatsby-wordpress/./src/styles/contentStyles.js","webpack://idsc-gatsby-wordpress/./src/components/EventCard.jsx","webpack://idsc-gatsby-wordpress/./src/templates/eventArchive.js"],"names":["AppLink","chakra","GatsbyLink","baseStyle","bgColor","color","borderRadius","textTransform","width","py","px","_hover","AppButton","text","url","rest","to","PostListMeta","Stack","PostLiContent","EventCard","props","categories","length","key","uri","direction","className","itemScope","itemType","image","featuredImage","fluid","alt","minWidth","objectFit","maxHeight","base","md","as","fontSize","itemProp","parse","title","startDate","endDate","pt","fontWeight","venue","address","city","data","allWpTribeEvent","nodes","pageInfo","customEvent","pageContext","archiveType","archivePath","posts","isHomePage","Seo","divider","borderColor","spacing","mb","p","listStyleType","map","post","index","node","localFile","childImageSharp","gatsbyImageData","filter","slug","date","excerpt","author","tribeEventsCats"],"mappings":"wMAIMA,GAAUC,E,SAAAA,QAAOC,OAAY,CACjCC,UAAW,CACTC,QAAS,WACTC,MAAO,YACPC,aAAc,KACdC,cAAe,YACfC,MAAO,cACPC,GAAI,EACJC,GAAI,EACJC,OAAQ,CACNP,QAAS,YACTC,MAAO,eAKAO,EAAY,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,IAAQC,GAAU,yBACjD,OACE,gCAeA,gBAACf,EAAD,eACEgB,GAAIF,GACAC,GACJF,M,oHCpCOI,GAAehB,YAAOiB,MAEtBC,GAAgBlB,YAAOiB,O,kOCKvBE,EAAY,SAAAC,GACRA,EAAMC,WAAWC,OAChC,OACE,gCACE,sBAAIC,IAAKH,EAAMI,KACb,gBAAC,KAAD,CACEC,UAAW,CAAC,SAAU,SAAU,MAAO,OACvCC,UAAU,iBACVC,WAAS,EACTC,SAAS,6BAET,gBAAC,IAAD,CACEC,MAAOT,EAAMU,cAAcC,MAC3BC,IAAKZ,EAAMU,cAAcE,IACzBC,SAAU,CAAC,OAAQ,OACnBC,UAAU,QACVC,UAAU,UAEZ,gBAAC,IAAD,CACE5B,MAAO,CAAC6B,KAAK,OAAQC,GAAI,QAEzB,8BACE,gBAAC,IAAD,CAASC,GAAG,KAAKC,SAAS,SAASnC,MAAM,aACvC,gBAAC,IAAD,CACEkC,GAAIrC,OACJc,GAAIK,EAAMI,IACVgB,SAAS,MACTpC,MAAM,aAEN,wBAAMoC,SAAS,aAAYC,QAAMrB,EAAMsB,UAG3C,gBAAC,KAAD,CAAWC,UAAWvB,EAAMuB,UAAWC,QAASxB,EAAMwB,QAASC,GAAI,EAAGN,SAAS,YAYjF,gBAAC,IAAD,KACA,gBAAC,IAAD,CAAMD,GAAG,OAAOQ,WAAW,QAAOL,QAAMrB,EAAM2B,MAAMA,QACpD,2BACG3B,EAAM2B,MAAMC,QAHf,KAG0B5B,EAAM2B,MAAME,MAEtC,gBAAC,IAAD,CAAWpC,IAAKO,EAAMI,IAAKZ,KAAK,aAAaJ,GAAI,EAAGC,GAAI,EAAG8B,SAAS,eCwChF,EA1FqB,SAAAnB,GAAU,IAAD,EAOxBA,EALF8B,KAF0B,IAGxBC,gBAAmBC,EAHK,EAGLA,MAAOC,EAHF,EAGEA,SAC1BC,EAJwB,EAIxBA,YAJwB,EAOxBlC,EADFmC,YAAeC,EANW,EAMXA,YAAaC,EANF,EAMEA,YAExBC,EAAQN,EAEd,OAAKM,EAAMpC,OAaT,gBAAC,IAAD,eACEqC,YAAU,GACNN,EAFN,CAGEI,YAAaA,EACbD,YAAaA,IAEb,gBAACI,EAAA,EAAD,CAAKlB,MAAM,6BACX,gBAAC,KAAD,CACEJ,GAAG,KACHuB,QAAS,gBAAC,KAAD,CAAcC,YAAY,aACnCC,QAAS,EACTC,GAAI,EACJC,EAAG,EACHC,cAAc,QAEbR,EAAMS,KAAI,SAACC,EAAMC,GAAW,IAAD,YACpB3B,EAAQ0B,EAAK1B,MACbZ,EAAgB,CACpBC,MAAK,UACHqC,EAAKtC,qBADF,iBACH,EAAoBwC,YADjB,iBACH,EAA0BC,iBADvB,iBACH,EAAqCC,uBADlC,aACH,EACIC,gBACNzC,KAAK,UAAAoC,EAAKtC,qBAAL,mBAAoBwC,YAApB,eAA0BtC,MAA1B,IAGDe,EAAQO,EAAYF,MAAMsB,QAAO,SAAAJ,GACrC,OAAOA,EAAKK,OAASP,EAAKO,QAG5B,OACE,gCACE,gBAACxD,EAAD,CACEI,IAAK8C,EACL3B,MAAOA,EACPZ,cAAeA,EACfN,IAAK4C,EAAK5C,IACVoD,KAAMR,EAAKQ,KACXC,QAAST,EAAKS,QACdC,OAAQV,EAAKU,OAAOR,KACpBjD,WAAY+C,EAAKW,gBAAgB3B,MACjCL,MAAOA,EAAM,GAAGA,MAChBJ,UAAWyB,EAAKzB,UAChBC,QAASwB,EAAKxB,gBApDxB,gBAAC,IAAD,CAAQe,YAAU,GAChB,gBAACC,EAAA,EAAD,CAAKlB,MAAM,6BACX","file":"component---src-templates-event-archive-js-03297c4b0550e13bb77d.js","sourcesContent":["import React from \"react\"\nimport { Link as GatsbyLink } from \"gatsby\"\nimport { Link, chakra } from \"@chakra-ui/react\"\n\nconst AppLink = chakra(GatsbyLink, {\n  baseStyle: {\n    bgColor: \"gray.200\",\n    color: \"brand.600\",\n    borderRadius: \"md\",\n    textTransform: \"uppercase\",\n    width: \"fit-content\",\n    py: 3,\n    px: 2,\n    _hover: {\n      bgColor: \"brand.500\",\n      color: \"gray.100\",\n    },\n  }\n})\n\nexport const AppButton = ({text, url, ...rest}) => {\n  return (\n    <>\n    {/* <Link \n      as={GatsbyLink}\n      to={url}\n      bgColor=\"gray.200\"\n      color=\"brand.600\"\n      py={3}\n      px={2}\n      borderRadius=\"md\"\n      textTransform=\"uppercase\"\n      width=\"fit-content\"\n      _hover={{ bgColor: 'brand.500', color: \"gray.100\" }}\n    >\n      {text}\n    </Link> */}\n    <AppLink\n      to={url}\n      {...rest}\n    >{text}\n    </AppLink>\n    </>\n  )\n}\n","import { Stack, chakra } from \"@chakra-ui/react\"\n\n// Post List\n\nexport const PostListMeta = chakra(Stack)\n\nexport const PostLiContent = chakra(Stack)\n\n","import React from \"react\"\nimport { Link as GatsbyLink } from \"gatsby\"\nimport parse from \"html-react-parser\"\nimport { AppButton } from \"./atoms/button\"\nimport { Stack, Heading, Text, Link } from \"@chakra-ui/react\"\n\nimport { PostLiContent, PostListMeta } from \"../styles/contentStyles\"\nimport { EventMeta } from \"../styles/postStyles\"\n\nimport { ChakraImage } from \"./atoms/chakraImage\"\n\nexport const EventCard = props => {\n  let catTotal = props.categories.length\n  return (\n    <>\n      <li key={props.uri}>\n        <Stack\n          direction={[\"column\", \"column\", \"row\", \"row\"]}\n          className=\"post-list-item\"\n          itemScope\n          itemType=\"http://schema.org/Article\"\n        >\n          <ChakraImage\n            image={props.featuredImage.fluid}\n            alt={props.featuredImage.alt}\n            minWidth={[\"100%\", \"50%\"]}\n            objectFit=\"cover\"\n            maxHeight=\"16rem\"\n          />\n          <PostLiContent\n            width={{base:\"100%\", md: \"50%\"}}\n          >\n            <header>\n              <Heading as=\"h3\" fontSize=\"1.4rem\" color=\"brand.600\">\n                <Link\n                  as={GatsbyLink}\n                  to={props.uri}\n                  itemProp=\"url\"\n                  color=\"brand.600\"\n                >\n                  <span itemProp=\"headline\">{parse(props.title)}</span>\n                </Link>\n              </Heading>\n              <EventMeta startDate={props.startDate} endDate={props.endDate} pt={4} fontSize=\"0.9rem\" />\n            </header>\n            {/* <Text\n              as=\"section\"\n              fontSize=\"sm\"\n              isTruncated\n              noOfLines={4}\n              whiteSpace=\"normal\"\n              itemProp=\"description\"\n            >\n              {parse(props.excerpt)}\n            </Text> */}\n            <Text>\n            <Text as=\"span\" fontWeight=\"600\">{parse(props.venue.venue)}</Text>\n            <br />\n              {props.venue.address}, {props.venue.city}\n            </Text>\n            <AppButton url={props.uri} text=\"Learn More\" py={2} px={3} fontSize=\".9rem\" />\n          </PostLiContent>\n        </Stack>\n      </li>\n    </>\n  )\n}\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/Seo\"\nimport { EventCard } from \"../components/EventCard\"\nimport EventArchivePagination from \"../components/EventArchivePagination\"\n\nimport { Stack, StackDivider } from \"@chakra-ui/react\"\n\nconst EventArchive = props => {\n  const {\n    data: {\n      allWpTribeEvent: { nodes, pageInfo },\n      customEvent,\n    },\n    pageContext: { archiveType, archivePath },\n  } = props\n  const posts = nodes\n\n  if (!posts.length) {\n    return (\n      <Layout isHomePage>\n        <Seo title=\"Automotive News & Events\" />\n        <p>\n          No blog posts found. Add posts to your WordPress site and they'll\n          appear here!\n        </p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout\n      isHomePage\n      {...pageInfo}\n      archivePath={archivePath}\n      archiveType={archiveType}\n    >\n      <Seo title=\"Automotive News & Events\" />\n      <Stack\n        as=\"ol\"\n        divider={<StackDivider borderColor=\"gray.200\" />}\n        spacing={4}\n        mb={4}\n        p={8}\n        listStyleType=\"none\"\n      >\n        {posts.map((post, index) => {\n          const title = post.title\n          const featuredImage = {\n            fluid:\n              post.featuredImage?.node?.localFile?.childImageSharp\n                ?.gatsbyImageData,\n            alt: post.featuredImage?.node?.alt || ``,\n          }\n\n          const venue = customEvent.nodes.filter(node => {\n            return node.slug === post.slug\n          })\n\n          return (\n            <>\n              <EventCard\n                key={index}\n                title={title}\n                featuredImage={featuredImage}\n                uri={post.uri}\n                date={post.date}\n                excerpt={post.excerpt}\n                author={post.author.node}\n                categories={post.tribeEventsCats.nodes}\n                venue={venue[0].venue}\n                startDate={post.startDate}\n                endDate={post.endDate}\n              />\n            </>\n          )\n        })}\n      </Stack>\n      {/* <Pagination>\n            {previousPagePath && (\n              <>\n                <AppButton url={previousPagePath} text=\"< Previous\"></AppButton>\n                <br />\n              </>\n            )}\n            {nextPagePath && (\n              <AppButton url={nextPagePath} text=\"Next >\"></AppButton>\n            )}\n          </Pagination> */}\n      {/* <EventArchivePagination\n        {...pageInfo}\n        archiveType={archiveType}\n        archivePath={archivePath}\n      /> */}\n    </Layout>\n  )\n}\n\nexport default EventArchive\n\nexport const pageQuery = graphql`\n  query WordPressTribeEventArchive(\n    $offset: Int!\n    $perPage: Int!\n    $categoryDatabaseId: Int\n  ) {\n    allWpTribeEvent(\n      sort: { fields: startDate, order: ASC }\n      limit: $perPage\n      skip: $offset\n      filter: {\n        tribeEventsCats: {\n          nodes: { elemMatch: { databaseId: { eq: $categoryDatabaseId } } }\n        }\n      }\n    ) {\n      nodes {\n        excerpt\n        uri\n        slug\n        date(formatString: \"MMMM DD, YYYY\")\n        startDate\n        endDate\n        title\n        excerpt\n        featuredImage {\n          node {\n            altText\n            localFile {\n              childImageSharp {\n                gatsbyImageData(placeholder: TRACED_SVG, layout: FULL_WIDTH)\n              }\n            }\n          }\n        }\n        author {\n          node {\n            name\n            uri\n          }\n        }\n        tribeEventsCats {\n          nodes {\n            name\n            uri\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        currentPage\n        pageCount\n      }\n    }\n    customEvent: allTribeEvent(sort: { fields: start_date, order: ASC }) {\n      nodes {\n        slug\n        title\n        venue {\n          venue\n          address\n          city\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}